name: "VBA Build"
description: "Build VBA-Enabled Office documents from source code using GitHub Actions."

branding:
  icon: 'code'
  color: 'blue' 

inputs:
  source-dir:
    description: 'Relative path to the directory containing the source folders'
    required: false
    default: 'src'
  test-framework:
    description: 'The test framework to use for the build process.'
    required: false
    default: 'none'
  office-app:
    description: |
      The Office application to install.
      The default mode is automatic and will detect the app based on the folder name.
      To force a specific app instead, use the options: Excel, Word, PowerPoint or Access.
    required: false
    default: 'automatic'

runs:
  using: "composite"
  steps:
    - name: "Install 7-zip"
      shell: pwsh
      run: choco install 7zip.install
    # https://community.chocolatey.org/packages?q=Excel
    - name: "Installing Office 365 (takes about 5 minutes...)"
      id: "install_office"
      shell: pwsh
      run: choco install office365proplus -y
    - name: "Display Chocolatey logs in case of Office install failure"
      if: failure() && steps.install_office.outcome == 'failure'
      run: |
        if (Test-Path -Path "C:\ProgramData\chocolatey\logs\chocolatey.log") {
          Write-Host "============ Chocolatey Log Contents ============"
          Get-Content -Path "C:\ProgramData\chocolatey\logs\chocolatey.log"
          Write-Host "============ End of Chocolatey Logs ============="
        } else {
          Write-Host "Chocolatey log file not found at C:\ProgramData\chocolatey\logs\chocolatey.log"
        }
      shell: pwsh
    - name: "Run VBA Build"
      id: "run_vba_build"
      shell: pwsh
      run: |
        ${{ github.action_path }}\Main.ps1 `
          -SourceDir "${{ inputs['source-dir'] }}" `
          -TestFramework "${{ inputs['test-framework'] }}" `
          -OfficeAppDetection "${{ inputs['office-app'] }}"
    - name: "Build Access Database (if detected)"
      if: steps.run_vba_build.outputs.has-access-database == 'True'
      id: "build_access"
      uses: ./subactions/msaccess-vcs-build-all
      with:
        source-dir-values: "${{ steps.run_vba_build.outputs.access-folders }}"
        target-dir: "${{ inputs['source-dir'] }}/out"
        compile: "false"
        vcs-url: "https://api.github.com/repos/josef-poetzl/msaccess-vcs-addin/releases/tags/v4.1.2-build"
        expected-sha256: "sha256:03e61d7c569cee55a960b23695d9128c79f2b21bff658ea52bc3849a9e351de8"
outputs:
  processed-folders:
    description: "Number of folders processed during the build"
    value: ${{ steps.run_vba_build.outputs.processed-folders }}
  successful-builds:
    description: "Number of successful builds completed"
    value: ${{ steps.run_vba_build.outputs.successful-builds }}
  office-apps:
    description: "Comma-separated list of Office applications used"
    value: ${{ steps.run_vba_build.outputs.office-apps }}
  access-folders:
    description: "Comma-separated list of Access database source folders"
    value: ${{ steps.run_vba_build.outputs.access-folders }}
  has-access-database:
    description: "Boolean indicating if any Access database folders were found"
    value: ${{ steps.run_vba_build.outputs.has-access-database }}
  first-access-folder:
    description: "The first Access database folder that was processed (if any)"
    value: ${{ steps.extract_access_folder.outputs.first-access-folder }}
