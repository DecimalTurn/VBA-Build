name: Test Build VBA
on:
  workflow_dispatch:
    inputs:
      run_checks:
        description: 'Run checks on the build output'
        required: false
        type: boolean
        default: false
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - dev*
    paths-ignore:
      - '**/README.md'
      - '.gitattributes'
      - '.devcontainer/**'
      - '.github/workflows/tests_access.yml'
      - '.github/workflows/image_similarity_check.yml'

permissions:
  id-token: write
  attestations: write

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5
      - name: "Build VBA-Enabled Documents (using own action)"
        id: build_vba
        uses: ./
        with:
          source-dir: "./tests"
          test-framework: "rubberduck"
        timeout-minutes: 20
      - name: "Upload Build Artifact"
        uses: actions/upload-artifact@v4
        id: "upload"
        with:
          name: "VBA-Enabled-Documents"
          path: "./tests/out/*"
          if-no-files-found: warn
      - name: "Take exiting screenshot"
        if: always()
        run: |
          . "./scripts/utils/Screenshot.ps1"
          # Create the directory if it does not exist
          if (!(Test-Path -Path ${{ github.workspace }}/tests/screenshots)) {
            New-Item -ItemType Directory -Path ${{ github.workspace }}/tests/screenshots
          }
          # Minimize PowerShell window
          . "./scripts/utils/Minimize.ps1"
          Minimize-Window "Administrator: C:\Program Files\PowerShell\7\pwsh.EXE"
          Take-Screenshot -OutputPath ${{ github.workspace }}/tests/screenshots/ExitScreenshot.png
        shell: pwsh      
      # TODO: Check if better method to visualize the screenshots: https://github.com/actions/upload-artifact/issues/14
      - name: "Upload Screenshots"
        # Run this step even if the build failed
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "Screenshots"
          path: "./tests/screenshots/*"
          if-no-files-found: warn
      - name: "Attestation"
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: "VBA-Enabled-Documents"
          subject-digest: sha256:${{ steps.upload.outputs.artifact-digest }}
  build-check:
    if: github.event.inputs.run_checks == 'true'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: "Checkout"
        uses: actions/checkout@v5
        
      - name: "Download Build Artifact"
        uses: actions/download-artifact@v4
        with:
          name: "Screenshots"
          path: "./tests/screenshots"
          
      - name: "Check Screenshot Similarity"
        run: |
          # Install ImageMagick for image comparison
          sudo apt-get update
          sudo apt-get install -y imagemagick
          
          # Debug: Show directory structure to verify paths
          echo "Current directory: $(pwd)"
          echo "Contents of ./images directory:"
          ls -la ./images || echo "images directory doesn't exist"
          echo "Contents of ./images/fixtures directory:"
          ls -la ./images/fixtures || echo "images/fixtures directory doesn't exist"
          echo "Contents of ./tests/screenshots directory:"
          ls -la ./tests/screenshots || echo "tests/screenshots directory doesn't exist"
          
          # Check if reference image exists
          if [ ! -f "./images/fixtures/ExitScreenshot.png" ]; then
            echo "Reference image ./images/fixtures/ExitScreenshot.png not found!"
            # Create the directory structure if it doesn't exist
            mkdir -p ./images/fixtures
            # Copy the screenshot as a new reference if available
            if [ -f "./tests/screenshots/ExitScreenshot.png" ]; then
              echo "Creating reference image from current screenshot"
              cp "./tests/screenshots/ExitScreenshot.png" "./images/fixtures/ExitScreenshot.png"
              echo "Reference image created. Skip comparison for this run."
              exit 0
            else
              echo "No screenshot available to create a reference image"
              exit 1
            fi
          fi
          
          # Check if test image exists
          if [ ! -f "./tests/screenshots/ExitScreenshot.png" ]; then
            echo "Test image ./tests/screenshots/ExitScreenshot.png not found!"
            exit 1
          fi
          
          # Compare images and get similarity score
          echo "Comparing screenshots..."
          if ! SIMILARITY=$(compare -metric RMSE "./images/fixtures/ExitScreenshot.png" "./tests/screenshots/ExitScreenshot.png" null: 2>&1); then
            echo "Image comparison failed: $SIMILARITY"
            exit 1
          fi
          
          echo "Similarity: $SIMILARITY"
          
          # Extract the numeric value from the similarity output
          VALUE=$(echo $SIMILARITY | grep -oE '[0-9]+(\.[0-9]+)?')
          
          if [ -z "$VALUE" ]; then
            echo "Failed to extract numeric value from similarity output"
            exit 1
          fi
          
          echo "Difference value: $VALUE"
          
          # Install bc for floating point comparison
          sudo apt-get install -y bc
          
          # Fail if difference is too large (adjust threshold as needed)
          if (( $(echo "$VALUE > 0.1" | bc -l) )); then
            echo "Screenshots differ significantly!"
            exit 1
          else
            echo "Screenshots are similar enough."
          fi
        shell: bash